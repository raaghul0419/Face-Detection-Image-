import cv2

#Load some pre-trained data on face frontals from opencv (haar cascade algorithm)
#CascadeClassifier is an effective object detection method which loads a classifier from a file
trained_face_data=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

#choose an image to detect faces in
#imread method loads an image from specified file
#The image should be in the working directory or a full path of image should be given.
cv2.namedWindow('Face Detector', cv2.WINDOW_NORMAL) #Creates a window with freedom of dimensions
img = cv2.imread('messi.jpg') 

#must convert the image to grayscale
grayscaled_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

#Detect faces
#detectMultiScale detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
face_coordinates=trained_face_data.detectMultiScale(grayscaled_img)

#print(face_coordinates) 
#once the print command is run, we get the coordinates like [1314  395  893  893] where 1314,395 points to the top left corner of the rectangle and 893,893 are the width and height of the rectangle.

#Draw rectangles around the faces
for (x, y, w, h) in face_coordinates:
    cv2.rectangle(img,(x, y),(x+w,y+h),(0,255,0),2)

#imshow is used to diplay the image in a new window with the given name
cv2.imshow('Face Detector',img)
cv2.waitKey() #Display the image infinitely until any keypress

print("Code Completed")import cv2

#Load some pre-trained data on face frontals from opencv (haar cascade algorithm)
#CascadeClassifier is an effective object detection method which loads a classifier from a file
trained_face_data=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

#choose an image to detect faces in
#imread method loads an image from specified file
#The image should be in the working directory or a full path of image should be given.
cv2.namedWindow('Face Detector', cv2.WINDOW_NORMAL) #Creates a window with freedom of dimensions
img = cv2.imread('messi.jpg') 

#must convert the image to grayscale
grayscaled_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

#Detect faces
#detectMultiScale detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
face_coordinates=trained_face_data.detectMultiScale(grayscaled_img)

#print(face_coordinates) 
#once the print command is run, we get the coordinates like [1314  395  893  893] where 1314,395 points to the top left corner of the rectangle and 893,893 are the width and height of the rectangle.

#Draw rectangles around the faces
for (x, y, w, h) in face_coordinates:
    cv2.rectangle(img,(x, y),(x+w,y+h),(0,255,0),2)

#imshow is used to diplay the image in a new window with the given name
cv2.imshow('Face Detector',img)
cv2.waitKey() #Display the image infinitely until any keypress

print("Code Completed")
